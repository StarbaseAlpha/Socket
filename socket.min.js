"use strict";function Socket(server,stateHandler,messageHandler,errorHandler){let ws=null,tries=0,closed=!1,ERROR=e=>{errorHandler&&"function"==typeof errorHandler&&errorHandler(e),console.error(e)};const stateChange=function(state){stateHandler&&"function"==typeof stateHandler&&stateHandler(state)},onopen=function(e){stateChange("connected"),closed=!1,tries=0},connect=function(){ws&&1===ws.readyState?ERROR("Already Connected."):server?((ws=new WebSocket(server)).onopen=onopen,ws.onmessage=onmessage,ws.onclose=onclose,ws.onerror=onerror):ERROR("No Server Provided.")},onclose=function(e){stateChange("disconnected"),closed||(ERROR("disconnected."),tries<3?(tries++,stateChange("reconnecting"),setTimeout(connect,3e3)):(stateChange("disconnected"),ERROR("Failed to reconnect 3 times."),closed=!0))},onmessage=function(msg){if(messageHandler&&"function"==typeof messageHandler)try{msg=JSON.parse(msg.data),messageHandler(msg)}catch(e){}},onerror=function(err){errorHandler&&"function"==typeof errorHandler&&errorHandler(err)};let socket={getState:function(){return!(!ws||1!==ws.readyState)}};return socket.connect=socket.open=connect,socket.send=(message=>{ws&&1===ws.readyState?ws.send(JSON.stringify(message),err=>{err?ERROR(err.toString()):console.log("Message Sent")}):ERROR("Not Connected")}),socket.close=function(){closed=!0,ws&&1===ws.readyState?ws.close():ERROR("Not Connected")},socket.onMessage=(handler=>{handler&&"function"==typeof handler&&(messageHandler=handler)}),socket.onState=(handler=>{handler&&"function"==typeof handler&&(stateHandler=handler)}),socket.onError=(handler=>{handler&&"function"==typeof handler&&(errorHandler=handler)}),socket.setServer=(newserver=>{server=newserver}),socket}